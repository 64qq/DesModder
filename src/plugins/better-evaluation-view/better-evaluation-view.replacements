# Better Evaluation View Replacements

*plugin* `better-evaluation-view`

## Show undefineds: JSX consumer

*Description* `Show NaN, -∞, and +∞`

*Find* => `undefined`
```js
undefined: ()=> $DcgShared['n'](
  $ViewClass,
  {
    ...this.props,
    content: () => this.controller.s("shared-calculator-label-undefined")
  }
)
```

*Replace* `undefined` with
```js
undefined: () => $DcgShared.Components.IfElse(
    () => DSM.betterEvaluationView,
    {
      true: () => $DcgShared['n'](
        Desmos.Private.Fragile.StaticMathquillView,
        {
          latex: () => this.getNumberLabelString?.() || "undefined",
          config: {}
        }
      ),
      false: () => $DcgShared['n'](
        $ViewClass,
        {
          ...this.props,
          content: () => this.controller.s("shared-calculator-label-undefined")
        }
      )
    }
  )
```

## Show list elements: JSX consumer

*Description* `Show list elements`

*Find* => `list`
```js
()=>this.getEvaluationType(), {
list: () => $Dcgview.createElement(__oldList__)
```

*Replace* `list` with
```js
()=>this.getEvaluationType(), {
list: () => DSM.replaceElement(
  () => $Dcgview.createElement(__oldList__),
  () => DSM.betterEvaluationView?.listEvaluation(() => this.props.val())
)
```

### Alternative

*Description* `Show list elements (2)`

*Find* => `list`
```js
()=>this.cachedEvaluationRHS)({
list: $rhs => $DcgShared['n'](__oldList__)
```

*Replace* `list` with
```js
()=>this.cachedEvaluationRHS)({
list: $rhs => DSM.replaceElement(
  () => $DcgShared['n'](__oldList__),
  () => DSM.betterEvaluationView?.listEvaluation(() => {
    const itemModel = this.controller.getItemModel(this.props.id());
    // get untruncated value
    return itemModel.formula.typed_constant_value.value;
  })
)
```

*Find* => `emptyList`
```js
emptyList: () => $emptyListDcgShared['n'](__oldEmptyList__)
```

*Replace* `emptyList` with
```js
emptyList: () => DSM.replaceElement(
  () => $emptyListDcgShared['n'](__oldEmptyList__),
  () => DSM.betterEvaluationView?.listEvaluation(() => [])
)
```

## Show color values: JSX consumer

*Description* `Show color values`

*Find* => `color`
```js
rgbcolor: () => $Dcgview.createElement(__swatch__)
```

*Replace* `color` with
```js
rgbcolor: () => DSM.replaceElement(
  () => $Dcgview.createElement(__swatch__),
  () => DSM.betterEvaluationView?.colorEvaluation(() => this.props.val())
)
```

### Alternative

*Description* `Show color values (2)`

*Find* => `color`
```js
rgbcolor: $rhs => $DcgShared['n'](__swatch__)
```

*Replace* `color` with
```js
rgbcolor: $rhs => DSM.replaceElement(
  () => $DcgShared['n'](__swatch__),
  () => DSM.betterEvaluationView?.colorEvaluation(() => this.getEvaluationRHS().val)
)
```

## Distinguish undefineds in numericLabels

*Description* `Distinguish NaN vs -∞ vs +∞ vs complex`

*worker_only*

Add a value field to "undefined" labels

*Find* => `undefined`
```js
if (isNaN($val) || !isFinite($val)) return { type: "undefined" }
```

Format complex numbers nicely

*Find*
```js
complexNumberLabel: () => $complexNumberLabel,
```

*Replace* `undefined` with
```js
if (isNaN($val) || !isFinite($val))
  return {
    type: "decimal",
    value: Array.isArray($val) && $val.length == 2
      ? $complexNumberLabel($val, {digits: 5})
      : isNaN($val)
      ? "\\mathrm{NaN}"
      : $val === Infinity
      ? "\\infty"
      : $val === -Infinity
      ? "-\\infty"
      : "undefined",
  };
```

## Distinguish between 0 and -0 in numericLabels

*Description* `Distinguish 0 vs -0`

*worker_only*

*Find* => `zero`
```js
if ($val === 0 || Math.abs($val) < $zeroCutoff)
  return {
    type: 'decimal',
    value: '0'
  }
```

*Replace* `zero` with
```js
if ($val === 0) {
  if (!DSM.betterEvaluationView || Object.is($val, 0)) {
    return {
      type: "decimal",
      value: "0"
    }
  } else {
    return {
      type: "decimal",
      value: "-0"
    }
  }
} else if ($zeroCutoff && Math.abs($val) < $zeroCutoff) {
  if (!DSM.betterEvaluationView || Math.sign($val) === 1) {
    return {
      type: "decimal",
      value: "0"
    }
  } else {
    return {
      type: "decimal",
      value: "-0"
    }
  }
}
```

## Distinguish NaN, +∞, -∞ in lists.

*Description* `Distinguish NaN, +∞, -∞ in lists.`

I'm really confused. The match doesn't work without *worker_only*, but the code
runs on the main page, not the worker.

*worker_only*

*Find* => `truncatedLatexLabelDef`
```js
function $truncatedLatexLabel($e, $t) {
    let $r = $numericLabel($e, $t);
    switch ($r.type) {
    case "undefined":
        return "undefined";
    case "decimal":
        return $r.value;
    case "scientific":
        return $r.mantissa + "\\times10^{" + $r.exponent + "}";
```

*Replace* `truncatedLatexLabelDef` with
```js
function $truncatedLatexLabel($e, $t) {
    let $r = $numericLabel($e, $t);
    switch ($r.type) {
    case "undefined":
        return DSM.betterEvaluationView ? $r.value : 'undefined';
    case "decimal":
        return $r.value;
    case "scientific":
        return $r.mantissa + "\\times10^{" + $r.exponent + "}";
```
