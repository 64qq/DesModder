# Insert Panels replacements

*plugin* `pin-expressions` `text-mode`


## Insert panels on the expressions list

*Description* `Insert panels to show Text Mode and pinned expressions`

*Find* => `element`
```js
$DCGView.createElement(
  "div",
  {
    class: () => ({
        "dcg-exppanel-container" ____
      }),
    ____
  },
  __children__
)
```

*Replace* `children` with
```js
__children__,
// pinned expressions
$DCGView.createElement(
  $DCGView.Components.For,
  {
    each: () => window.DesModder?.controller?.inTextMode?.()
        ? [] 
        : this.controller?.getAllItemModels?.() ?? [],
    key: e => e.guid
  },
  $DCGView.createElement(
    "div",
    {
      class: $DCGView.const("dsm-pinned-expressions dcg-exppanel"),
      style: () => ({
        background: this.controller.getBackgroundColor()
      })
    },
    t => $DCGView.createElement(
        $DCGView.Components.If,
        {
          predicate: () => window.DesModder?.controller?.isExpressionPinned(t.id)
        },
        // marking as a drag copy causes it not to affect the render shells calcuations
        // (all the logic is present already because if the top expression is dragged
        // to the bottom, it shouldn't cause all expressions to render from the top)
        () => this.makeDragCopyViewForModel(t)
      )
  )
),
// text mode panel
$DCGView.createElement(
  $DCGView.Components.If,
  {
    predicate: () => window.DesModder?.controller?.inTextMode?.()
  },
  () => $DCGView.createElement(
    "div",
    {
      class: $DCGView.const("dsm-text-editor-container"),
      didMount: div => window.DesModder?.controller?.exposedPlugins["text-mode"].mountEditor(div),
      willUnmount: div => window.DesModder?.controller?.exposedPlugins["text-mode"].unmountEditor(div)
    }
  )
)
```
