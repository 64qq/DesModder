# Replacements for Text Mode

*plugin* `text-mode`

## Hide the keypad when in text mode

*Description* `Hide the on-screen keypad in Text Mode`

*Find* => `from`

```js
isShowKeypadButtonVisible () { return __curr__ }
```

*Replace* `from` with

```js
isShowKeypadButtonVisible () {
  return (__curr__) && !DSM.textMode?.inTextMode
}
```

## Add text mode toggle button

*Description* `Add toggle button to enable Text Mode`

*Find* => `element`
```js
.createElement(
  'div',
  { class: $DCGView.const('dcg-right-buttons') },
  __children__
)
```

*Find_surrounding_template* `element` => `template`

*Find* inside `template`

```js
.createElement($Tooltip, {
  tooltip: () => this.controller.s("graphing-calculator-label-edit-list-tooltip")
```

*Replace* `__children__` with
```js
$DCGView.createElement(
  $DCGView.Components.If,
  {
    predicate: () => DSM.textMode && !this.controller.isInEditListMode()
  },
  () => $DCGView.createElement(
      $Tooltip,
      {
        tooltip: () => DesModder.format("text-mode-toggle"),
        gravity: () => this.controller.isNarrow() ? 'n' : 's'
      },
      $DCGView.createElement(
        'span',
        {
          class: $DCGView.const('dcg-icon-btn'),
          handleEvent: $DCGView.const('true'),
          role: $DCGView.const('button'),
          tabindex: $DCGView.const('0'),
          onTap: () => DSM.textMode?.toggleTextMode()
        },
        $DCGView.createElement('i', {
          class: $DCGView.const('dcg-icon-title')
        })
      )
    )
),
$DCGView.Components.IfElse(
  () => !this.controller.getGraphSettings().config.graphpaper && window.DesModder,
  {
    true: () => DSM.pillboxMenus.pillboxButtonsView(true),
    false: null
  }
),
__children__
```

## Add Text Mode class for styling

*Description* `Style expressions list differently in Text Mode`

*Find* => `from`

```js
"dcg-exppanel-container": !0
```

*Replace* `from` with

```js
"dcg-exppanel-container": !0,
"dsm-in-text-mode": DSM.textMode?.inTextMode
```

## Extract ExpressionIconView class

*Description* `Show style circles for Text Mode statements`

*Find*

```js
$ = "#000", $ = "#fff", $ExpressionIconView = class
```

*Replace* `ExpressionIconView` with
```js
$ExpressionIconView = (window.DesModderFragile ??= {}).ExpressionIconView
```
